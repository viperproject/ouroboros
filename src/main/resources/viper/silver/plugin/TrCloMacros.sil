/**
 * If the definitions in this file are inlined, they will no longer be available to the user.
 * For definitions which need to be available to the user even after the frontend has completed inlining, please refer to TrCloPersistentMacros.sil
 */

function DISJOINT(g1: Set[Ref], g2:Set[Ref]): Bool
{
    (forall n: Ref :: { (n in g1)}{(n in g2) } (n in g1) ==> !((n in g2)))// && //TODO multipattern
     //(forall n: Ref :: { (n in g1)}{(n in g2) } (n in g2) ==> !((n in g1))) //TODO multipattern
}

function NoNullInGraph(g0:Set[Ref]): Bool
{
    !(null in g0)
}

function CLOSED(g: Set[Ref]): Bool
    requires (forall n: Ref :: { n.$field$ } (n in g) ==> acc(n.$field$, 1 / 2))
{
    (forall n: Ref :: { (n.$field$ in g) } { (n in g),n.$field$ } (n in g) && n.$field$ != null ==> (n.$field$ in g))
}

function apply_TCFraming(g0:Set[Ref], g1:Set[Ref]): Bool
    //requires GRAPH(g0) && GRAPH(g1)
    //requires forall n:Ref :: {n.l} n in g0 ==> acc(n.l)
    //requires forall n:Ref :: {n.r} n in g0 ==> acc(n.r)
    //requires forall n:Ref :: {n.l} n in g1 ==> acc(n.l)
    //requires forall n:Ref :: {n.r} n in g1 ==> acc(n.r)

    //requires (forall n:Ref :: { n in g0}{ n in g1 } n in g0 ==> !(n in g1))
    //requires (forall n:Ref :: { n in g0}{ n in g1 } n in g1 ==> !(n in g0))

    // needed for triggering
    ensures g0 union g1 == g1 union g0

    ensures forall u:Ref, v:Ref :: { exists_path($$(g0),u,v) }{ exists_path($$(g0 union g1),u,v) } u in g0 && v in g0 && exists_path($$(g0),u,v) ==> exists_path($$(g0 union g1),u,v)
    ensures forall u:Ref, v:Ref :: { exists_path($$(g1),u,v) }{ exists_path($$(g1 union g0),u,v) } u in g1 && v in g1 && exists_path($$(g1),u,v) ==> exists_path($$(g1 union g0),u,v)

    ensures forall u:Ref, v:Ref :: { exists_path($$(g0),u,v)}{ exists_path($$(g0 union g1),u,v) } u in g0 && v in g0 && !exists_path($$(g0 union g1),u,v) ==> !exists_path($$(g0),u,v)
    ensures forall u:Ref, v:Ref :: { exists_path($$(g1),u,v) }{ exists_path($$(g1 union g0),u,v) } u in g1 && v in g1 && !exists_path($$(g1 union g0),u,v) ==> !exists_path($$(g1),u,v)

    // only for disjoint graphs
    ensures forall u:Ref, v:Ref :: { exists_path($$(g0),u,v) }{ exists_path($$(g0 union g1),u,v) }
     u in g0 && v in g0 && !exists_path($$(g0),u,v) && (CLOSED(g0) || CLOSED(g1)) && DISJOINT(g0, g1) ==> !exists_path($$(g0 union g1),u,v)
    ensures forall u:Ref, v:Ref :: { exists_path($$(g1),u,v) }{ exists_path($$(g0 union g1),u,v) }
     u in g1 && v in g1 && !exists_path($$(g1),u,v) && (CLOSED(g0) || CLOSED(g1)) && DISJOINT(g0, g1) ==> !exists_path($$(g1 union g0),u,v)
     ensures (CLOSED(g0) && DISJOINT(g0, g1)) ==> (forall u: Ref, v: Ref :: {exists_path($$(g0 union g1), u, v)} (u in g0 && v in g1) ==> !exists_path($$(g0 union g1), u, v))
     ensures (CLOSED(g1) && DISJOINT(g0, g1)) ==> (forall u: Ref, v: Ref :: {exists_path($$(g0 union g1), v, u)} (u in g0 && v in g1) ==> !exists_path($$(g0 union g1), v, u))

//     ensures acyclic_graph($$(g0 union g1)) ==> acyclic_graph($$(g0))
     ensures IS_ZOPG(g0 union g1) ==> IS_ZOPG(g0)

method NEW() returns (node: Ref)

method create_node(u: Set[Ref]) returns (node: Ref)
    requires PROTECTED_GRAPH(u)
    //requires CLOSED(u)
    ensures PROTECTED_GRAPH(u)
    //ensures CLOSED(u)
    ensures !(node in u)
    ensures acc(node.$field$) && node.$field$ == null

method link_$field$(g:Set[Ref], x:Ref, y:Ref)
    requires x in g
    requires y != null ==> y in g
    //requires !(edge($$(g), x, y))
    requires PROTECTED_GRAPH(g,x,$field$)
    ensures PROTECTED_GRAPH(g,x,$field$)
    ensures x.$field$ == y
    ensures y == null ==> $$(g) == old($$(g))
    ensures y != null ==> forall v1:Ref, v2:Ref ::
        { edge(old($$(g)),v1,v2) }
            edge($$(g),v1,v2) <==> edge(old($$(g)),v1,v2) || (v1==x && v2==y)
    ensures y != null ==> forall v1:Ref, v2:Ref ::
        { exists_path($$(g),v1,v2) }
            exists_path($$(g),v1,v2) <==> exists_path(old($$(g)),v1,v2) || (exists_path(old($$(g)),v1,x) && exists_path(old($$(g)),y,v2))


method unlink_$field$(g:Set[Ref], x:Ref)
    requires x in g
    requires PROTECTED_GRAPH(g,x,$field$)
    ensures PROTECTED_GRAPH(g,x,$field$)
    ensures x.$field$ == null
    ensures old(x.$field$) == null ==> $$(g) == old($$(g))
    ensures old(x.$field$) != null ==> forall v1:Ref, v2:Ref ::
        { edge($$(g),v1,v2) }
            edge($$(g),v1,v2) <==> edge(old($$(g)),v1,v2) && !(v1==x && v2==old(x.$field$))
    ensures old(x.$field$) != null ==> forall v1: Ref, v2: Ref ::
        {exists_path($$(g), v1, v2)}
            !exists_path(old($$(g)), v1, v2)  ==> !exists_path($$(g), v1, v2)
//    ensures old(x.$field$) != null ==> forall v1: Ref, v2:Ref ::
//        { exists_path($$(g),v1, v2)}
//            ( exists_path($$(g), v1, v2)) <==> (v1 == v2) ||
//            ( exists n: Ref :: edge($$(g), v1, n) && exists_path($$(g), n, v2))
//    ensures old(x.$field$) != null ==> (forall v1:Ref, v2:Ref ::
//        { exists_path($$(g),v1,v2) }
//            (v1 != v2) ==> (
//                exists_path($$(g),v1,v2) <==>
//                    exists_path(old($$(g)),v1,v2) && !(exists_path(old($$(g)),v1,x) && exists_path(old($$(g)),old(x.$field$),v2))))

//Discussed and looked into the paper and seems to be sound on 18 july 2018
method unlink_DAG_$field$(g: Set[Ref], x:Ref)
    requires x in g
    requires PROTECTED_GRAPH(g,x,$field$)// && acyclic_graph($$(g))
    ensures PROTECTED_GRAPH(g,x,$field$)
    ensures x.$field$ == null
    ensures old(x.$field$) == null ==> $$(g) == old($$(g))
    ensures old(x.$field$) != null ==> forall v1:Ref, v2:Ref ::
        { edge($$(g),v1,v2) }
            edge($$(g),v1,v2) <==> edge(old($$(g)),v1,v2) && !(v1==x && v2==old(x.$field$))
    ensures old(x.$field$) != null ==> forall v1: Ref, v2: Ref ::
        {exists_path($$(g), v1, v2)}
            !exists_path(old($$(g)), v1, v2)  ==> !exists_path($$(g), v1, v2)
    ensures old(x.$field$) != null ==> forall v1:Ref, v2:Ref ::
        { exists_path($$(g),v1,v2) }
             exists_path($$(g),v1,v2) <==> (v1==v2) ||
//                !( forall n:Ref :: !(exists_path(old($$(g)),v1,n) && exists_path(old($$(g)),n,v2) && //TODO triggers
                ( exists n:Ref :: exists_path(old($$(g)),v1,n) && exists_path(old($$(g)),n,v2) &&

                    ( !exists_path(old($$(g)),n,x) && !exists_path(old($$(g)),x,n) ||
//                      !exists_path(old($$(g)),n,old(x.$field$)) && !exists_path(old($$(g)),old(x.$field$),n) ))
                      !exists_path(old($$(g)),n,old(x.$field$)) && !exists_path(old($$(g)),old(x.$field$),n) )
                )
                ||
//                !( forall n:Ref :: !(n != x && n != old(x.$field$) && exists_path(old($$(g)),x,n) && exists_path(old($$(g)),n,old(x.$field$)) ))
                ( exists n:Ref :: n != x && n != old(x.$field$) && exists_path(old($$(g)),x,n) && exists_path(old($$(g)),n,old(x.$field$)) )
                ||
//                !( forall u:Ref, v:Ref :: !((u != x || v != old(x.$field$)) && edge(old($$(g)),u,v) && exists_path(old($$(g)),v1,u) &&
//                                                                            exists_path(old($$(g)),u,x) && exists_path(old($$(g)),old(x.$field$),v) &&
//                                                                            exists_path(old($$(g)),v,v2) ))
                ( exists u:Ref, v:Ref :: (u != x || v != old(x.$field$)) && edge(old($$(g)),u,v) && exists_path(old($$(g)),v1,u) &&
                                                                            exists_path(old($$(g)),u,x) && exists_path(old($$(g)),old(x.$field$),v) &&
                                                                            exists_path(old($$(g)),v,v2) )
    //ensures acyclic_graph($$(g))

function update_DAG_invariant(g:Set[Ref], x:Ref, y:Ref): Bool
//    requires x in g && y in g //Not needed, as this function is only used after unlink, where it is already asserted
    requires PROTECTED_GRAPH(g)
{
    !(exists_path($$(g), y, x))
}


method link_DAG_$field$(g:Set[Ref], x:Ref, y:Ref)
    requires x in g
    requires y != null ==> y in g && y != x
    requires PROTECTED_GRAPH(g,x,$field$) //&& !(exists_path($$(g), y, x))
    ensures PROTECTED_GRAPH(g,x,$field$)
    ensures x.$field$ == y
    ensures y == null ==> $$(g) == old($$(g))
    ensures y != null ==> forall v1:Ref, v2:Ref ::
        { edge(old($$(g)),v1,v2) }
            edge($$(g),v1,v2) <==> edge(old($$(g)),v1,v2) || (v1==x && v2==y)
    ensures y != null ==> forall v1:Ref, v2:Ref ::
        { exists_path($$(g),v1,v2) }
            exists_path($$(g),v1,v2) <==> exists_path(old($$(g)),v1,v2) || (exists_path(old($$(g)),v1,x) && exists_path(old($$(g)),y,v2))
    ensures acyclic_graph($$(g))

function apply_no_exit_closed(EG: Set[Edge], g1: Set[Ref], g2: Set[Ref]): Bool
    requires PROTECTED_GRAPH(g1) && CLOSED(g1)
    requires PROTECTED_GRAPH(g2)
    ensures DISJOINT(g1, g2) ==> (forall v1: Ref, v2:Ref ::
    {exists_path(EG,v1,v2)}
        v1 in g1 && v2 in g2 ==> !exists_path(EG, v1, v2))

function GRAPH_decl(g: Set[Ref]): Bool

function CLOSED_GRAPH_decl(g: Set[Ref]): Bool

function ZOPG_decl(g: Set[Ref]): Bool

function CLOSED_ZOPG_decl(g: Set[Ref]): Bool

function DAG_decl(g: Set[Ref]): Bool

function CLOSED_DAG_decl(g: Set[Ref]): Bool

function FOREST_decl(g:Set[Ref]): Bool

function CLOSED_FOREST_decl(g: Set[Ref]): Bool

function Node_decl(n: Ref, g: Set[Ref]): Bool

function IS_INITIALIZED(g: Set[Ref]): Bool

method update_$field$(g:Set[Ref], x:Ref, y:Ref)

method update_DAG_$field$(g:Set[Ref], x:Ref, y:Ref)


