domain Edge {
  
  function edge_pred(e: Edge): Ref
  
  function edge_succ(e: Edge): Ref
  
  function create_edge(p: Ref, s: Ref): Edge
  
  function create_edge_(p: Ref, s: Ref): Edge
  
  axiom edge_injectivity {
    (forall p: Ref, s: Ref :: { create_edge(p, s) } edge_pred(create_edge(p, s)) == p && edge_succ(create_edge(p, s)) == s)
  }
}

domain TrClo {
  
  function exists_path(EG: Set[Edge], start: Ref, end: Ref): Bool
  
  function exists_path_(EG: Set[Edge], start: Ref, end: Ref): Bool
  
  function exists_spath(EG: Set[Edge], from: Set[Ref], to: Ref): Bool
  
  function apply_noExit(EG: Set[Edge], U: Set[Ref], M: Set[Ref]): Bool
  
  function inst_uReach(EG: Set[Edge], x: Ref): Set[Ref]
  
  function inst_uReach_rev(EG: Set[Edge], x: Ref): Set[Ref]
  
  function acyclic_graph(EG: Set[Edge]): Bool
  
  function unshared_graph(EG: Set[Edge]): Bool
  
  function func_graph(EG: Set[Edge]): Bool
  
  function edge(EG: Set[Edge], p: Ref, s: Ref): Bool
  
  function edge_(EG: Set[Edge], p: Ref, s: Ref): Bool
  
  function succs(EG: Set[Edge], pred: Ref): Set[Ref]
  
  axiom ax_Succs {
    (forall EG: Set[Edge], pred: Ref, succ: Ref :: { (succ in succs(EG, pred)) } (succ in succs(EG, pred)) == edge_(EG, pred, succ))
  }
  
  axiom ax_EdgeSynonim {
    (forall EG: Set[Edge], p: Ref, s: Ref :: { edge(EG, p, s) } edge(EG, p, s) == edge_(EG, p, s))
  }
  
  axiom ax_Edge {
    (forall EG: Set[Edge], p: Ref, s: Ref :: { (create_edge(p, s) in EG) } { edge(EG, p, s) } edge_(EG, p, s) == (create_edge(p, s) in EG))
  }
  
  axiom ax_NoExit {
    (forall EG: Set[Edge], U: Set[Ref], M: Set[Ref] :: { apply_noExit(EG, U, M) } apply_noExit(EG, U, M) ==> (forall u: Ref, v: Ref :: { edge(EG, u, v) } { (u in M),(v in M) } (u in M) && ((v in U) && !((v in M))) ==> !edge(EG, u, v)) ==> (forall u: Ref, v: Ref :: { exists_path(EG, u, v) } { (u in M),(v in M) } (u in M) && ((v in U) && !((v in M))) ==> !exists_path(EG, u, v)))
  }
  
  axiom ax_instantiation_uReach {
    (forall EG: Set[Edge], x: Ref, v: Ref :: { (v in inst_uReach(EG, x)) } { exists_path(EG, x, v) } (v in inst_uReach(EG, x)) == exists_path(EG, x, v))
  }
  
  axiom ax_instantiation_uReach_rev {
    (forall EG: Set[Edge], u: Ref, y: Ref :: { (u in inst_uReach_rev(EG, y)) } { exists_path(EG, u, y) } (u in inst_uReach_rev(EG, y)) == exists_path(EG, u, y))
  }
  
  axiom ax_Alias {
    (forall EG: Set[Edge], start: Ref, end: Ref :: { exists_path(EG, start, end) } exists_path(EG, start, end) == exists_path_(EG, start, end))
  }
  
  axiom ax_ExistsPath {
    (forall EG: Set[Edge], start: Ref, end: Ref :: { exists_path(EG, start, end) } { edge(EG, start, end) } exists_path_(EG, start, end) == (start == end || !(forall w: Ref :: { edge(EG, start, w),exists_path(EG, w, end) } !(edge(EG, start, w) && exists_path_(EG, w, end)))))
  }
  
  axiom ax_ExistsPathTrans {
    (forall EG: Set[Edge], u: Ref, v: Ref, w: Ref :: { exists_path(EG, u, w),exists_path(EG, w, v) } exists_path_(EG, u, w) && exists_path_(EG, w, v) ==> exists_path_(EG, u, v))
  }
  
  axiom ax_AcyclicGraph {
    (forall EG: Set[Edge] :: { acyclic_graph(EG) } acyclic_graph(EG) == (forall v1: Ref, v2: Ref :: { edge(EG, v1, v2) } { exists_path(EG, v2, v1) } !edge(EG, v1, v2) || !exists_path(EG, v2, v1)))
  }
  
  axiom ax_UnsharedGraph {
    (forall EG: Set[Edge] :: { unshared_graph(EG) } unshared_graph(EG) == (forall v1: Ref, v2: Ref, v: Ref :: { edge(EG, v1, v),edge(EG, v2, v) } edge(EG, v1, v) && edge(EG, v2, v) ==> v1 == v2))
  }
  
  axiom ax_FuncGraph {
    (forall EG: Set[Edge] :: { func_graph(EG) } func_graph(EG) == (forall v1: Ref, v2: Ref, v: Ref :: { edge(EG, v, v1),edge(EG, v, v2) } edge(EG, v, v1) && edge(EG, v, v2) ==> v1 == v2))
  }
  
  axiom ax_ExistsSetPath {
    (forall EG: Set[Edge], from: Set[Ref], to: Ref :: { exists_spath(EG, from, to) } exists_spath(EG, from, to) == !(forall f: Ref :: { (f in from) } { exists_path(EG, f, to) } !((f in from) && exists_path(EG, f, to))))
  }
}

domain Node {
  
  
}

domain Graph {
  
  
}

domain List {
  
  
}

field next: Ref

function $$(nodes: Set[Ref]): Set[Edge]
  requires (forall n: Ref :: { n.next } (n in nodes) ==> acc(n.next, 1 / 2))
  ensures (forall p: Ref, s: Ref :: { create_edge(p, s) } ((p in nodes) && (s in nodes) && p.next == s && p != s) == (create_edge(p, s) in result))
  ensures (forall p: Ref, s: Ref :: { (p in nodes),(s in nodes),exists_path(result, p, s) } (p in nodes) && exists_path(result, p, s) ==> (s in nodes))
  ensures (forall p: Ref, s: Ref :: { (p in nodes),(s in nodes),exists_path(result, p, s) } (s in nodes) && exists_path(result, p, s) ==> (p in nodes)) 


function DISJOINT(g1_0: Set[Ref], g2_0: Set[Ref]): Bool 
{
  (forall n: Ref :: { (n in g1_0),(n in g2_0) } (n in g1_0) ==> !((n in g2_0))) && (forall n: Ref :: { (n in g1_0),(n in g2_0) } (n in g2_0) ==> !((n in g1_0)))
}

function NoNullInGraph(g0: Set[Ref]): Bool 
{
  !((null in g0))
}

function CLOSED(g_0: Set[Ref]): Bool
  requires (forall n: Ref :: { n.next } (n in g_0) ==> acc(n.next, 1 / 2)) 
{
  (forall n: Ref :: { (n.next in g_0) } { (n in g_0),n.next } (n in g_0) && n.next != null ==> (n.next in g_0))
}

function apply_TCFraming(g0: Set[Ref], g1_0: Set[Ref]): Bool
  requires (forall n: Ref :: { n.next } (n in g0) ==> acc(n.next, 1 / 2))
  requires (forall n: Ref :: { n.next } (n in g1_0) ==> acc(n.next, 1 / 2))
  requires (forall n: Ref :: { (n in g0),(n in g1_0) } (n in g0) ==> !((n in g1_0)))
  requires (forall n: Ref :: { (n in g0),(n in g1_0) } (n in g1_0) ==> !((n in g0)))
  ensures g0 union g1_0 == g1_0 union g0
  ensures (forall u: Ref, v: Ref :: { exists_path($$(g0), u, v) } { exists_path($$(g0 union g1_0), u, v) } (u in g0) && ((v in g0) && exists_path($$(g0), u, v)) ==> exists_path($$(g0 union g1_0), u, v))
  ensures (forall u: Ref, v: Ref :: { exists_path($$(g1_0), u, v) } { exists_path($$(g1_0 union g0), u, v) } (u in g1_0) && ((v in g1_0) && exists_path($$(g1_0), u, v)) ==> exists_path($$(g1_0 union g0), u, v))
  ensures (forall u: Ref, v: Ref :: { exists_path($$(g0), u, v) } { exists_path($$(g0 union g1_0), u, v) } (u in g0) && ((v in g0) && !exists_path($$(g0 union g1_0), u, v)) ==> !exists_path($$(g0), u, v))
  ensures (forall u: Ref, v: Ref :: { exists_path($$(g1_0), u, v) } { exists_path($$(g1_0 union g0), u, v) } (u in g1_0) && ((v in g1_0) && !exists_path($$(g1_0 union g0), u, v)) ==> !exists_path($$(g1_0), u, v))
  ensures (forall u: Ref, v: Ref :: { exists_path($$(g0), u, v) } { exists_path($$(g0 union g1_0), u, v) } (u in g0) && ((v in g0) && (!exists_path($$(g0), u, v) && (CLOSED(g0) || CLOSED(g1_0)))) ==> !exists_path($$(g0 union g1_0), u, v))
  ensures (forall u: Ref, v: Ref :: { exists_path($$(g1_0), u, v) } { exists_path($$(g0 union g1_0), u, v) } (u in g1_0) && ((v in g1_0) && (!exists_path($$(g1_0), u, v) && (CLOSED(g0) || CLOSED(g1_0)))) ==> !exists_path($$(g1_0 union g0), u, v)) 


function apply_no_exit_closed(EG: Set[Edge], g1_0: Set[Ref], g2_0: Set[Ref]): Bool
  requires !((null in g1_0)) && (forall n: Ref :: { n.next } (n in g1_0) ==> acc(n.next, 1 / 2)) && CLOSED(g1_0)
  requires !((null in g2_0)) && (forall n: Ref :: { n.next } (n in g2_0) ==> acc(n.next, 1 / 2))
  ensures (forall v1: Ref, v2: Ref :: { exists_path(EG, v1, v2) } (v1 in g1_0) && (v2 in g2_0) ==> !exists_path(EG, v1, v2)) 


method join(g1: Set[Ref], g2: Set[Ref]) returns (g: Set[Ref])
  requires DISJOINT(g1, g2)
  requires NoNullInGraph(g1) && ((forall n: Ref :: { n.next } (n in g1) ==> acc(n.next, write)) && CLOSED(g1))
  requires NoNullInGraph(g2) && (forall n: Ref :: { n.next } (n in g2) ==> acc(n.next, write))
  requires CLOSED(g1 union g2)
  ensures (forall n: Ref :: { n.next } (n in g union g1 union g2) ==> acc(n.next, write))
  ensures NoNullInGraph(g)
  ensures NoNullInGraph(g1) && CLOSED(g1)
  ensures NoNullInGraph(g2)
  ensures CLOSED(g union g1 union g2)
{
  var UNIVERSE: Set[Ref]
  var g_init: Bool
  UNIVERSE := g2 union g1
  g_init := false
  
  // Apply TC Framing for input graphs g1 and g2 
inhale apply_TCFraming(g1, g2)
  
  // Assume there are no paths from closed Graph g1 to disjoint Graph g2 
inhale apply_no_exit_closed($$(g1 union g2), g1, g2)
  
  // update Universe and set g_init: Bool to true
g := g1 union g2
  g_init := true
  UNIVERSE := UNIVERSE union g
}