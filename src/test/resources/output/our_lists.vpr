domain Edge {
  
  function edge_pred(e: Edge): Ref
  
  function edge_succ(e: Edge): Ref
  
  function create_edge(p: Ref, s: Ref): Edge
  
  function create_edge_(p: Ref, s: Ref): Edge
  
  axiom edge_injectivity {
    (forall p: Ref, s: Ref :: { create_edge(p, s) } edge_pred(create_edge(p, s)) == p && edge_succ(create_edge(p, s)) == s)
  }
}

domain TrClo {
  
  function exists_path(EG: Set[Edge], start: Ref, end: Ref): Bool
  
  function exists_path_(EG: Set[Edge], start: Ref, end: Ref): Bool
  
  function exists_spath(EG: Set[Edge], from: Set[Ref], to: Ref): Bool
  
  function apply_noExit(EG: Set[Edge], U: Set[Ref], M: Set[Ref]): Bool
  
  function inst_uReach(EG: Set[Edge], x_0: Ref): Set[Ref]
  
  function inst_uReach_rev(EG: Set[Edge], x_0: Ref): Set[Ref]
  
  function acyclic_graph(EG: Set[Edge]): Bool
  
  function unshared_graph(EG: Set[Edge]): Bool
  
  function func_graph(EG: Set[Edge]): Bool
  
  function edge(EG: Set[Edge], p: Ref, s: Ref): Bool
  
  function edge_(EG: Set[Edge], p: Ref, s: Ref): Bool
  
  function succs(EG: Set[Edge], pred: Ref): Set[Ref]
  
  axiom ax_Succs {
    (forall EG: Set[Edge], pred: Ref, succ: Ref :: { (succ in succs(EG, pred)) } (succ in succs(EG, pred)) == edge_(EG, pred, succ))
  }
  
  axiom ax_EdgeSynonim {
    (forall EG: Set[Edge], p: Ref, s: Ref :: { edge(EG, p, s) } edge(EG, p, s) == edge_(EG, p, s))
  }
  
  axiom ax_Edge {
    (forall EG: Set[Edge], p: Ref, s: Ref :: { (create_edge(p, s) in EG) } { edge(EG, p, s) } edge_(EG, p, s) == (create_edge(p, s) in EG))
  }
  
  axiom ax_NoExit {
    (forall EG: Set[Edge], U: Set[Ref], M: Set[Ref] :: { apply_noExit(EG, U, M) } apply_noExit(EG, U, M) ==> (forall u: Ref, v: Ref :: { edge(EG, u, v) } { (u in M),(v in M) } (u in M) && ((v in U) && !((v in M))) ==> !edge(EG, u, v)) ==> (forall u: Ref, v: Ref :: { exists_path(EG, u, v) } { (u in M),(v in M) } (u in M) && ((v in U) && !((v in M))) ==> !exists_path(EG, u, v)))
  }
  
  axiom ax_instantiation_uReach {
    (forall EG: Set[Edge], x_0: Ref, v: Ref :: { (v in inst_uReach(EG, x_0)) } { exists_path(EG, x_0, v) } (v in inst_uReach(EG, x_0)) == exists_path(EG, x_0, v))
  }
  
  axiom ax_instantiation_uReach_rev {
    (forall EG: Set[Edge], u: Ref, y: Ref :: { (u in inst_uReach_rev(EG, y)) } { exists_path(EG, u, y) } (u in inst_uReach_rev(EG, y)) == exists_path(EG, u, y))
  }
  
  axiom ax_Alias {
    (forall EG: Set[Edge], start: Ref, end: Ref :: { exists_path(EG, start, end) } exists_path(EG, start, end) == exists_path_(EG, start, end))
  }
  
  axiom ax_ExistsPath {
    (forall EG: Set[Edge], start: Ref, end: Ref :: { exists_path(EG, start, end) } { edge(EG, start, end) } exists_path_(EG, start, end) == (start == end || (exists w: Ref :: edge(EG, start, w) && exists_path_(EG, w, end))))
  }
  
  axiom ax_ExistsPathTrans {
    (forall EG: Set[Edge], u: Ref, v: Ref, w: Ref :: { exists_path(EG, u, w),exists_path(EG, w, v) } exists_path_(EG, u, w) && exists_path_(EG, w, v) ==> exists_path_(EG, u, v))
  }
  
  axiom ax_AcyclicGraph {
    (forall EG: Set[Edge] :: { acyclic_graph(EG) } acyclic_graph(EG) == (forall v1: Ref, v2: Ref :: { edge(EG, v1, v2) } { exists_path(EG, v2, v1) } !edge(EG, v1, v2) || !exists_path(EG, v2, v1)))
  }
  
  axiom ax_UnsharedGraph {
    (forall EG: Set[Edge] :: { unshared_graph(EG) } unshared_graph(EG) == (forall v1: Ref, v2: Ref, v: Ref :: { edge(EG, v1, v),edge(EG, v2, v) } edge(EG, v1, v) && edge(EG, v2, v) ==> v1 == v2))
  }
  
  axiom ax_FuncGraph {
    (forall EG: Set[Edge] :: { func_graph(EG) } func_graph(EG) == (forall v1: Ref, v2: Ref, v: Ref :: { edge(EG, v, v1),edge(EG, v, v2) } edge(EG, v, v1) && edge(EG, v, v2) ==> v1 == v2))
  }
  
  axiom ax_ExistsSetPath {
    (forall EG: Set[Edge], from: Set[Ref], to: Ref :: { exists_spath(EG, from, to) } exists_spath(EG, from, to) == (exists f: Ref :: (f in from) && exists_path(EG, f, to)))
  }
}

domain Node {
  
  
}

domain Graph {
  
  
}

domain List {
  
  
}

domain TriggerWisdoms {
  
  function __learn_trigger__(bla: Bool): Bool
  
  function __trigger_ref__(r: Ref): Bool
}

domain ZeroOnePathGraphTCs {
  
  function DEP(EG: Set[Edge], x_0: Ref, y: Ref, u: Ref, v: Ref): Bool
  
  function DEP_(EG: Set[Edge], x_0: Ref, y: Ref, u: Ref, v: Ref): Bool
  
  axiom ax_DEP_alias {
    (forall EG: Set[Edge], x_0: Ref, y: Ref, u: Ref, v: Ref :: { DEP(EG, x_0, y, u, v) } DEP(EG, x_0, y, u, v) == DEP_(EG, x_0, y, u, v))
  }
  
  axiom ax_DEP_0_2 {
    (forall EG: Set[Edge], x_0: Ref, y: Ref :: { DEP(EG, x_0, y, x_0, y) } { edge(EG, x_0, y) } edge(EG, x_0, y) == DEP_(EG, x_0, y, x_0, y))
  }
  
  axiom ax_HeadTriangleImposable {
    (forall EG: Set[Edge], x_0: Ref, y: Ref, v: Ref :: { DEP(EG, x_0, y, x_0, v) } { exists_path_(EG, x_0, y),exists_path(EG, v, y) } { edge(EG, x_0, v),exists_path_(EG, v, y) } exists_path_(EG, x_0, y) && (edge(EG, x_0, v) && exists_path_(EG, v, y)) ==> DEP_(EG, x_0, y, x_0, v))
  }
  
  axiom ax_TailTriangleImposable {
    (forall EG: Set[Edge], x_0: Ref, y: Ref, u: Ref :: { DEP(EG, x_0, y, u, y) } { exists_path_(EG, x_0, y),exists_path(EG, x_0, u) } { edge(EG, u, y),exists_path_(EG, x_0, u) } exists_path_(EG, x_0, y) && (exists_path_(EG, x_0, u) && edge(EG, u, y)) ==> DEP_(EG, x_0, y, u, y))
  }
  
  axiom ax_NoEdgeNoDEP {
    (forall EG: Set[Edge], x_0: Ref, y: Ref, u: Ref, v: Ref :: { DEP(EG, x_0, y, u, v) } !edge(EG, u, v) ==> !DEP_(EG, x_0, y, u, v))
  }
  
  axiom ax_DEP_trigger_magic {
    (forall EG: Set[Edge], x_0: Ref, y: Ref, u: Ref, v: Ref :: { DEP(EG, x_0, y, u, v) } DEP(EG, x_0, y, u, v) ==> exists_path(EG, x_0, y) && edge(EG, u, v))
  }
  
  axiom ax_DEP_6_head {
    (forall EG: Set[Edge], x_0: Ref, y: Ref, n: Ref :: { DEP(EG, y, n, x_0, y) } n != y ==> !DEP_(EG, y, n, x_0, y))
  }
  
  axiom ax_DEP_6_tail {
    (forall EG: Set[Edge], x_0: Ref, y: Ref, n: Ref :: { DEP(EG, n, x_0, x_0, y) } n != x_0 ==> !DEP_(EG, n, x_0, x_0, y))
  }
  
  axiom ax_DEP_7 {
    (forall EG: Set[Edge], nu: Ref, n: Ref, mu: Ref, sigma: Ref :: { DEP(EG, nu, n, mu, sigma) } nu != n && (n != sigma && (nu != mu && (edge(EG, nu, sigma) && edge(EG, mu, sigma)))) ==> !DEP_(EG, nu, n, mu, sigma))
  }
}

field next: Ref

function $$(nodes: Set[Ref]): Set[Edge]
  requires (forall n: Ref :: { n.next } (n in nodes) ==> acc(n.next, 1 / 2))
  ensures (forall p: Ref, s: Ref :: { create_edge(p, s) } ((p in nodes) && (s in nodes) && p.next == s && p != s) == (create_edge(p, s) in result))
  ensures (forall p: Ref, s: Ref :: { (p in nodes),(s in nodes),exists_path(result, p, s) } (p in nodes) && exists_path(result, p, s) ==> (s in nodes))
  ensures (forall p: Ref, s: Ref :: { (p in nodes),(s in nodes),exists_path(result, p, s) } (s in nodes) && exists_path(result, p, s) ==> (p in nodes)) 


function DISJOINT(g1: Set[Ref], g2: Set[Ref]): Bool 
{
  (forall n: Ref :: { (n in g1),(n in g2) } (n in g1) ==> !((n in g2))) && (forall n: Ref :: { (n in g1),(n in g2) } (n in g2) ==> !((n in g1)))
}

function NoNullInGraph(g0: Set[Ref]): Bool 
{
  !((null in g0))
}

function CLOSED(g_0: Set[Ref]): Bool
  requires (forall n: Ref :: { n.next } (n in g_0) ==> acc(n.next, 1 / 2)) 
{
  (forall n: Ref :: { (n.next in g_0) } { (n in g_0),n.next } (n in g_0) && n.next != null ==> (n.next in g_0))
}

function apply_TCFraming(g0: Set[Ref], g1: Set[Ref]): Bool
  requires (forall n: Ref :: { n.next } (n in g0) ==> acc(n.next, 1 / 2))
  requires (forall n: Ref :: { n.next } (n in g1) ==> acc(n.next, 1 / 2))
  requires (forall n: Ref :: { (n in g0),(n in g1) } (n in g0) ==> !((n in g1)))
  requires (forall n: Ref :: { (n in g0),(n in g1) } (n in g1) ==> !((n in g0)))
  ensures g0 union g1 == g1 union g0
  ensures (forall u: Ref, v: Ref :: { exists_path($$(g0), u, v) } { exists_path($$(g0 union g1), u, v) } (u in g0) && ((v in g0) && exists_path($$(g0), u, v)) ==> exists_path($$(g0 union g1), u, v))
  ensures (forall u: Ref, v: Ref :: { exists_path($$(g1), u, v) } { exists_path($$(g1 union g0), u, v) } (u in g1) && ((v in g1) && exists_path($$(g1), u, v)) ==> exists_path($$(g1 union g0), u, v))
  ensures (forall u: Ref, v: Ref :: { exists_path($$(g0), u, v) } { exists_path($$(g0 union g1), u, v) } (u in g0) && ((v in g0) && !exists_path($$(g0 union g1), u, v)) ==> !exists_path($$(g0), u, v))
  ensures (forall u: Ref, v: Ref :: { exists_path($$(g1), u, v) } { exists_path($$(g1 union g0), u, v) } (u in g1) && ((v in g1) && !exists_path($$(g1 union g0), u, v)) ==> !exists_path($$(g1), u, v)) 


function update_DAG_invariant(g_0: Set[Ref], x_0: Ref, y: Ref): Bool
  requires !((null in g_0)) && (forall n: Ref :: { n.next } (n in g_0) ==> acc(n.next, 1 / 2)) 
{
  !exists_path($$(g_0), y, x_0)
}

function apply_no_exit_closed(EG: Set[Edge], g1: Set[Ref], g2: Set[Ref]): Bool
  requires !((null in g1)) && (forall n: Ref :: { n.next } (n in g1) ==> acc(n.next, 1 / 2)) && CLOSED(g1)
  requires !((null in g2)) && (forall n: Ref :: { n.next } (n in g2) ==> acc(n.next, 1 / 2))
  ensures (forall v1: Ref, v2: Ref :: { exists_path(EG, v1, v2) } (v1 in g1) && (v2 in g2) ==> !exists_path(EG, v1, v2)) 


function GRAPH_decl(g_0: Set[Ref]): Bool 


function CLOSED_GRAPH_decl(g_0: Set[Ref]): Bool 


function ZOPG_decl(g_0: Set[Ref]): Bool 


function CLOSED_ZOPG_decl(g_0: Set[Ref]): Bool 


function DAG_decl(g_0: Set[Ref]): Bool 


function CLOSED_DAG_decl(g_0: Set[Ref]): Bool 


function FOREST_decl(g_0: Set[Ref]): Bool 


function CLOSED_FOREST_decl(g_0: Set[Ref]): Bool 


function update_ZOPG_invariant(g_0: Set[Ref], from: Ref, to: Ref): Bool
  requires !((null in g_0)) && (forall n: Ref :: { n.next } (n in g_0) ==> acc(n.next, 1 / 2)) 
{
  func_graph($$(g_0)) || (unshared_graph($$(g_0)) || (forall u: Ref, v: Ref :: { exists_path($$(g_0), u, from),exists_path($$(g_0), to, v) } (u in g_0) && ((v in g_0) && (u != v && exists_path($$(g_0), u, v))) ==> !exists_path($$(g_0), u, from) || !exists_path($$(g_0), to, v)))
}

method new_node() returns (node_0: Ref)


method create_node(u: Set[Ref]) returns (node_0: Ref)
{
  var UNIVERSE: Set[Ref]
  var lhs_node: Ref
  var fresh_x: Ref
  var singleton_graph: Set[Ref]
  UNIVERSE := Set[Ref]()
  inhale !((fresh_x in u))
  inhale (fresh_x in singleton_graph) && (forall n: Ref :: fresh_x != n ==> !((n in singleton_graph)))
  lhs_node := fresh_x
  inhale acc(lhs_node.next, write) && lhs_node.next == null
}

method link_next(g_0: Set[Ref], x_0: Ref, y: Ref)
  requires (x_0 in g_0)
  requires y != null ==> (y in g_0)
  requires !((null in g_0)) && ((x_0 in g_0) && (acc(x_0.next, write) && ((forall n: Ref :: { n.next } (n in g_0) && n != x_0 ==> acc(n.next, 1 / 2)) && (forall n: Ref :: { (n.next in g_0) } { (n in g_0),n.next } (n in g_0) && n.next != null ==> (n.next in g_0)))))
  ensures !((null in g_0)) && ((x_0 in g_0) && (acc(x_0.next, write) && ((forall n: Ref :: { n.next } (n in g_0) && n != x_0 ==> acc(n.next, 1 / 2)) && (forall n: Ref :: { (n.next in g_0) } { (n in g_0),n.next } (n in g_0) && n.next != null ==> (n.next in g_0)))))
  ensures x_0.next == y
  ensures y == null ==> $$(g_0) == old($$(g_0))
  ensures y != null ==> (forall v1: Ref, v2: Ref :: { edge(old($$(g_0)), v1, v2) } edge($$(g_0), v1, v2) == (edge(old($$(g_0)), v1, v2) || v1 == x_0 && v2 == y))
  ensures y != null ==> (forall v1: Ref, v2: Ref :: { exists_path($$(g_0), v1, v2) } exists_path($$(g_0), v1, v2) == (exists_path(old($$(g_0)), v1, v2) || exists_path(old($$(g_0)), v1, x_0) && exists_path(old($$(g_0)), y, v2)))


method unlink_next(g_0: Set[Ref], x_0: Ref)
  requires (x_0 in g_0)
  requires !((null in g_0)) && ((x_0 in g_0) && (acc(x_0.next, write) && ((forall n: Ref :: { n.next } (n in g_0) && n != x_0 ==> acc(n.next, 1 / 2)) && (forall n: Ref :: { (n.next in g_0) } { (n in g_0),n.next } (n in g_0) && n.next != null ==> (n.next in g_0)))))
  ensures !((null in g_0)) && ((x_0 in g_0) && (acc(x_0.next, write) && ((forall n: Ref :: { n.next } (n in g_0) && n != x_0 ==> acc(n.next, 1 / 2)) && (forall n: Ref :: { (n.next in g_0) } { (n in g_0),n.next } (n in g_0) && n.next != null ==> (n.next in g_0)))))
  ensures x_0.next == null
  ensures old(x_0.next) == null ==> $$(g_0) == old($$(g_0))
  ensures old(x_0.next) != null ==> (forall v1: Ref, v2: Ref :: { edge($$(g_0), v1, v2) } edge($$(g_0), v1, v2) == (edge(old($$(g_0)), v1, v2) && !(v1 == x_0 && v2 == old(x_0.next))))


method unlink_DAG_next(g_0: Set[Ref], x_0: Ref)
  requires (x_0 in g_0)
  requires !((null in g_0)) && ((x_0 in g_0) && (acc(x_0.next, write) && ((forall n: Ref :: { n.next } (n in g_0) && n != x_0 ==> acc(n.next, 1 / 2)) && (forall n: Ref :: { (n.next in g_0) } { (n in g_0),n.next } (n in g_0) && n.next != null ==> (n.next in g_0)))))
  ensures !((null in g_0)) && ((x_0 in g_0) && (acc(x_0.next, write) && ((forall n: Ref :: { n.next } (n in g_0) && n != x_0 ==> acc(n.next, 1 / 2)) && (forall n: Ref :: { (n.next in g_0) } { (n in g_0),n.next } (n in g_0) && n.next != null ==> (n.next in g_0)))))
  ensures x_0.next == null
  ensures old(x_0.next) == null ==> $$(g_0) == old($$(g_0))
  ensures old(x_0.next) != null ==> (forall v1: Ref, v2: Ref :: { edge($$(g_0), v1, v2) } edge($$(g_0), v1, v2) == (edge(old($$(g_0)), v1, v2) && !(v1 == x_0 && v2 == old(x_0.next))))
  ensures old(x_0.next) != null ==> (forall v1: Ref, v2: Ref :: { exists_path($$(g_0), v1, v2) } exists_path($$(g_0), v1, v2) == (v1 == v2 || ((exists n: Ref :: exists_path(old($$(g_0)), v1, n) && (exists_path(old($$(g_0)), n, v2) && (!exists_path(old($$(g_0)), n, x_0) && !exists_path(old($$(g_0)), x_0, n) || !exists_path(old($$(g_0)), n, old(x_0.next)) && !exists_path(old($$(g_0)), old(x_0.next), n)))) || ((exists n: Ref :: n != x_0 && (n != old(x_0.next) && (exists_path(old($$(g_0)), x_0, n) && exists_path(old($$(g_0)), n, old(x_0.next))))) || (exists u: Ref, v: Ref :: (u != x_0 || v != old(x_0.next)) && (edge(old($$(g_0)), u, v) && (exists_path(old($$(g_0)), v1, u) && (exists_path(old($$(g_0)), u, x_0) && (exists_path(old($$(g_0)), old(x_0.next), v) && exists_path(old($$(g_0)), v, v2))))))))))


method link_DAG_next(g_0: Set[Ref], x_0: Ref, y: Ref)
  requires (x_0 in g_0)
  requires y != null ==> (y in g_0)
  requires !((null in g_0)) && ((x_0 in g_0) && (acc(x_0.next, write) && ((forall n: Ref :: { n.next } (n in g_0) && n != x_0 ==> acc(n.next, 1 / 2)) && (forall n: Ref :: { (n.next in g_0) } { (n in g_0),n.next } (n in g_0) && n.next != null ==> (n.next in g_0)))))
  ensures !((null in g_0)) && ((x_0 in g_0) && (acc(x_0.next, write) && ((forall n: Ref :: { n.next } (n in g_0) && n != x_0 ==> acc(n.next, 1 / 2)) && (forall n: Ref :: { (n.next in g_0) } { (n in g_0),n.next } (n in g_0) && n.next != null ==> (n.next in g_0)))))
  ensures x_0.next == y
  ensures y == null ==> $$(g_0) == old($$(g_0))
  ensures y != null ==> (forall v1: Ref, v2: Ref :: { edge(old($$(g_0)), v1, v2) } edge($$(g_0), v1, v2) == (edge(old($$(g_0)), v1, v2) || v1 == x_0 && v2 == y))
  ensures y != null ==> (forall v1: Ref, v2: Ref :: { exists_path($$(g_0), v1, v2) } exists_path($$(g_0), v1, v2) == (exists_path(old($$(g_0)), v1, v2) || exists_path(old($$(g_0)), v1, x_0) && exists_path(old($$(g_0)), y, v2)))
  ensures acyclic_graph($$(g_0))


method update_next(g_0: Set[Ref], x_0: Ref, y: Ref)


method update_DAG_next(g_0: Set[Ref], x_0: Ref, y: Ref)


method unlink_ZOPG_next(g_0: Set[Ref], node_0: Ref)
  requires (node_0 in g_0)
  requires !((null in g_0)) && ((node_0 in g_0) && (acc(node_0.next, write) && ((forall n: Ref :: { n.next } (n in g_0) && n != node_0 ==> acc(n.next, 1 / 2)) && (forall n: Ref :: { (n.next in g_0) } { (n in g_0),n.next } (n in g_0) && n.next != null ==> (n.next in g_0)))))
  ensures !((null in g_0)) && ((node_0 in g_0) && (acc(node_0.next, write) && ((forall n: Ref :: { n.next } (n in g_0) && n != node_0 ==> acc(n.next, 1 / 2)) && (forall n: Ref :: { (n.next in g_0) } { (n in g_0),n.next } (n in g_0) && n.next != null ==> (n.next in g_0)))))
  ensures node_0.next == null
  ensures old(node_0.next) == null ==> $$(g_0) == old($$(g_0))
  ensures old(node_0.next) != null ==> (forall v1: Ref, v2: Ref :: { edge($$(g_0), v1, v2) } { exists_path($$(g_0), v1, v2) } edge($$(g_0), v1, v2) == (edge(old($$(g_0)), v1, v2) && !(v1 == node_0 && v2 == old(node_0.next))))
  ensures old(node_0.next) != null ==> (forall x_0: Ref, y: Ref, u: Ref, v: Ref :: { DEP($$(g_0), x_0, y, u, v) } { DEP(old($$(g_0)), x_0, y, u, v) } DEP(old($$(g_0)), x_0, y, u, v) && !DEP(old($$(g_0)), x_0, y, node_0, old(node_0.next)) ==> DEP($$(g_0), x_0, y, u, v))


method link_ZOPG_next(g_0: Set[Ref], from: Ref, to: Ref)
  requires (from in g_0)
  requires !((null in g_0)) && ((from in g_0) && (acc(from.next, write) && ((forall n: Ref :: { n.next } (n in g_0) && n != from ==> acc(n.next, 1 / 2)) && (forall n: Ref :: { (n.next in g_0) } { (n in g_0),n.next } (n in g_0) && n.next != null ==> (n.next in g_0))))) && from.next == null
  ensures !((null in g_0)) && ((from in g_0) && (acc(from.next, write) && ((forall n: Ref :: { n.next } (n in g_0) && n != from ==> acc(n.next, 1 / 2)) && (forall n: Ref :: { (n.next in g_0) } { (n in g_0),n.next } (n in g_0) && n.next != null ==> (n.next in g_0)))))
  ensures from.next == to
  ensures to == null ==> $$(g_0) == old($$(g_0))
  ensures to != null ==> (forall v1: Ref, v2: Ref :: { edge($$(g_0), v1, v2) } { exists_path($$(g_0), v1, v2) } edge($$(g_0), v1, v2) == (edge(old($$(g_0)), v1, v2) || v1 == from && v2 == to))
  ensures to != null ==> (forall x_0: Ref, y: Ref, u: Ref, v: Ref :: { DEP($$(g_0), x_0, y, u, v) } { DEP(old($$(g_0)), x_0, y, u, v) } from != to && (u != v && x_0 != y) ==> DEP(old($$(g_0)), x_0, y, u, v) || (x_0 == from && (u == from && (y == to && v == to)) || ((exists w: Ref, z: Ref :: (forall u_: Ref, v_: Ref :: { DEP(old($$(g_0)), x_0, y, u_, v_) } !DEP(old($$(g_0)), x_0, y, u_, v_)) && ((DEP(old($$(g_0)), x_0, from, u, v) && x_0 != from || x_0 == u && (u == from && v == to)) && (DEP(old($$(g_0)), to, y, w, z) && to != y || from == w && (to == z && z == y)))) || ((exists U: Ref, V: Ref :: (forall u_$0: Ref, v_$0: Ref :: { DEP(old($$(g_0)), x_0, y, u_$0, v_$0) } !DEP(old($$(g_0)), x_0, y, u_$0, v_$0)) && ((DEP(old($$(g_0)), x_0, from, U, V) && x_0 != from || x_0 == U && (U == from && V == to)) && (DEP(old($$(g_0)), to, y, u, v) && to != y || from == u && (to == v && v == y)))) || u == from && (v == to && (exists U: Ref, V: Ref, w: Ref, z: Ref :: (forall u_$1: Ref, v_$1: Ref :: { DEP(old($$(g_0)), x_0, y, u_$1, v_$1) } !DEP(old($$(g_0)), x_0, y, u_$1, v_$1)) && ((DEP(old($$(g_0)), x_0, from, U, V) && x_0 != from || x_0 == U && (U == from && V == to)) && (DEP(old($$(g_0)), to, y, w, z) && to != y || from == w && (to == z && z == y)))))))) ==> DEP($$(g_0), x_0, y, u, v))
  ensures to != null ==> (forall x_0: Ref, y: Ref, u: Ref, v: Ref :: { DEP($$(g_0), x_0, y, u, v) } { DEP(old($$(g_0)), x_0, y, u, v) } DEP($$(g_0), x_0, y, u, v) && !DEP($$(g_0), x_0, y, from, to) ==> DEP(old($$(g_0)), x_0, y, u, v))
  ensures to != null ==> (forall n: Ref :: { exists_path($$(g_0), to, n) } { exists_path($$(g_0), from, n) } (n in g_0) && n != from ==> __learn_trigger__(DEP($$(g_0), from, n, from, from.next)))
  ensures to != null ==> (forall n: Ref :: { exists_path($$(g_0), to, n) } { exists_path($$(g_0), from, n) } (n in g_0) && n != to ==> __learn_trigger__(DEP($$(g_0), to, n, to, to.next)))
  ensures to != null ==> (forall n: Ref :: { exists_path($$(g_0), n, to) } { exists_path($$(g_0), n, from) } (n in g_0) && n != from ==> __learn_trigger__(DEP($$(g_0), n, from, n, n.next)))
  ensures to != null ==> (forall n: Ref :: { DEP($$(g_0), to, n, to, to.next) } { DEP($$(g_0), from, n, from, from.next) } (n in g_0) ==> __learn_trigger__(exists_path($$(g_0), to, n)) && __learn_trigger__(exists_path(old($$(g_0)), to, n)))


method update_ZOPG_next(g_0: Set[Ref], x_0: Ref, y: Ref)


method swap(g: Set[Ref], x: Ref, i: Int, j: Int)
  requires NoNullInGraph(g) && (forall n: Ref :: { n.next } (n in g) ==> acc(n.next, write))
  requires CLOSED(g)
  requires 0 <= i && i < j
  requires (x in g)
  requires acyclic_graph($$(g)) && (func_graph($$(g)) && unshared_graph($$(g)))
  requires (forall n: Ref :: { exists_path($$(g), x, n) } (n in g) ==> exists_path($$(g), x, n))
  ensures (forall n: Ref :: { n.next } (n in g) ==> acc(n.next, write))
  ensures NoNullInGraph(g)
  ensures CLOSED(g)
{
  var UNIVERSE: Set[Ref]
  var count: Int
  var prev_node: Ref
  var node: Ref
  var prev_i: Ref
  var node_i: Ref
  UNIVERSE := g
  count := 0
  prev_node := x
  node := x.next
  prev_i := null
  node_i := null
  while (node != null && count <= j)
    invariant g subset UNIVERSE
    invariant NoNullInGraph(UNIVERSE)
    invariant (forall n: Ref :: { n.next } (n in UNIVERSE) ==> acc(n.next, write))
    invariant CLOSED(UNIVERSE)
    invariant 0 <= i && i < j
    invariant (x in g)
    invariant 0 <= count
    invariant node != null ==> (node in g)
    invariant count <= j ==> (prev_node in g)
    invariant i < count ==> (node_i in g) && (prev_i in g)
    invariant count <= j ==> prev_node.next == node
    invariant acyclic_graph($$(g)) && (func_graph($$(g)) && unshared_graph($$(g)))
    invariant (forall n: Ref :: { exists_path($$(g), x, n) } (n in g) ==> exists_path($$(g), x, n))
    invariant node_i != null ==> exists_path($$(g), prev_i, node_i)
    invariant node_i != null ==> exists_path($$(g), node_i, prev_node)
    invariant node != null ==> exists_path($$(g), prev_node, node) 
  {
    if (count == i) {
      node_i := node
      prev_i := prev_node
    }
    if (count == j) {
      var node_j: Ref
      var prev_j: Ref
      var exit: Ref
      node_j := node
      prev_j := prev_node
      exit := node_j.next
      unlink_DAG_next(g, prev_i)
      
      // Inserted invariant that is needed to preserve graph property after update.
assert update_DAG_invariant(g, prev_i, node_j)
      link_DAG_next(g, prev_i, node_j)
      if (node_i.next != node_j) {
        unlink_DAG_next(g, node_j)
        
        // Inserted invariant that is needed to preserve graph property after update.
assert update_DAG_invariant(g, node_j, node_i.next)
        link_DAG_next(g, node_j, node_i.next)
        unlink_DAG_next(g, prev_j)
        
        // Inserted invariant that is needed to preserve graph property after update.
assert update_DAG_invariant(g, prev_j, node_i)
        link_DAG_next(g, prev_j, node_i)
      } else {
        unlink_DAG_next(g, node_j)
        
        // Inserted invariant that is needed to preserve graph property after update.
assert update_DAG_invariant(g, node_j, node_i)
        link_DAG_next(g, node_j, node_i)
      }
      unlink_DAG_next(g, node_i)
      
      // Inserted invariant that is needed to preserve graph property after update.
assert update_DAG_invariant(g, node_i, exit)
      link_DAG_next(g, node_i, exit)
    }
    prev_node := node
    node := node.next
    count := count + 1
    assert node != null ==> exists_path($$(g), node, node) && exists_path($$(g), prev_node, node)
  }
}
