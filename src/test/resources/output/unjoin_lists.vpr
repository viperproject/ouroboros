domain Edge {
  
  function edge_pred(e: Edge): Ref
  
  function edge_succ(e: Edge): Ref
  
  function create_edge(p: Ref, s: Ref): Edge
  
  function create_edge_(p: Ref, s: Ref): Edge
  
  axiom edge_injectivity {
    (forall p: Ref, s: Ref :: { create_edge(p, s) } edge_pred(create_edge(p, s)) == p && edge_succ(create_edge(p, s)) == s)
  }
}

domain TrClo {
  
  function exists_path(EG: Set[Edge], start: Ref, end: Ref): Bool
  
  function exists_path_(EG: Set[Edge], start: Ref, end: Ref): Bool
  
  function exists_spath(EG: Set[Edge], from: Set[Ref], to: Ref): Bool
  
  function apply_noExit(EG: Set[Edge], U: Set[Ref], M: Set[Ref]): Bool
  
  function inst_uReach(EG: Set[Edge], x_0: Ref): Set[Ref]
  
  function inst_uReach_rev(EG: Set[Edge], x_0: Ref): Set[Ref]
  
  function acyclic_graph(EG: Set[Edge]): Bool
  
  function unshared_graph(EG: Set[Edge]): Bool
  
  function func_graph(EG: Set[Edge]): Bool
  
  function edge(EG: Set[Edge], p: Ref, s: Ref): Bool
  
  function edge_(EG: Set[Edge], p: Ref, s: Ref): Bool
  
  function succs(EG: Set[Edge], pred: Ref): Set[Ref]
  
  function skolem_w(EG: Set[Edge], start: Ref, end: Ref): Ref
  
  axiom ax_Succs {
    (forall EG: Set[Edge], pred: Ref, succ: Ref :: { (succ in succs(EG, pred)) } (succ in succs(EG, pred)) == edge_(EG, pred, succ))
  }
  
  axiom ax_EdgeSynonim {
    (forall EG: Set[Edge], p: Ref, s: Ref :: { edge(EG, p, s) } edge(EG, p, s) == edge_(EG, p, s))
  }
  
  axiom ax_Edge {
    (forall EG: Set[Edge], p: Ref, s: Ref :: { (create_edge(p, s) in EG) } { edge(EG, p, s) } edge_(EG, p, s) == (create_edge(p, s) in EG))
  }
  
  axiom ax_NoExit {
    (forall EG: Set[Edge], U: Set[Ref], M: Set[Ref] :: { apply_noExit(EG, U, M) } apply_noExit(EG, U, M) ==> (forall u_1: Ref, v_1: Ref :: { edge(EG, u_1, v_1) } (u_1 in M) && ((v_1 in U) && !((v_1 in M))) ==> !edge(EG, u_1, v_1)) ==> (forall u_1: Ref, v_1: Ref :: { exists_path(EG, u_1, v_1) } (u_1 in M) && ((v_1 in U) && !((v_1 in M))) ==> !exists_path(EG, u_1, v_1)))
  }
  
  axiom ax_instantiation_uReach {
    (forall EG: Set[Edge], x_0: Ref, v_1: Ref :: { (v_1 in inst_uReach(EG, x_0)) } { exists_path(EG, x_0, v_1) } (v_1 in inst_uReach(EG, x_0)) == exists_path(EG, x_0, v_1))
  }
  
  axiom ax_instantiation_uReach_rev {
    (forall EG: Set[Edge], u_1: Ref, y: Ref :: { (u_1 in inst_uReach_rev(EG, y)) } { exists_path(EG, u_1, y) } (u_1 in inst_uReach_rev(EG, y)) == exists_path(EG, u_1, y))
  }
  
  axiom ax_Alias {
    (forall EG: Set[Edge], start: Ref, end: Ref :: { exists_path(EG, start, end) } exists_path(EG, start, end) == exists_path_(EG, start, end))
  }
  
  axiom ax_EdgeMeansPath {
    (forall EG: Set[Edge], start: Ref, end: Ref :: { exists_path(EG, start, end) } edge(EG, start, end) ==> exists_path(EG, start, end))
  }
  
  axiom ax_ExistsPath {
    (forall EG: Set[Edge], start: Ref, end: Ref :: { exists_path(EG, start, end) } exists_path_(EG, start, end) ==> start == end || edge(EG, start, skolem_w(EG, start, end)) && exists_path_(EG, skolem_w(EG, start, end), end)) && (forall EG: Set[Edge], start: Ref, middle: Ref, end: Ref :: { edge(EG, start, middle),exists_path(EG, middle, end) } { edge(EG, start, middle),exists_path(EG, start, end) } { exists_path(EG, middle, end),exists_path(EG, start, end) } start == end || edge(EG, start, middle) && exists_path_(EG, middle, end) ==> exists_path_(EG, start, end))
  }
  
  axiom ax_ExistsPathTrans {
    (forall EG: Set[Edge], u_1: Ref, v_1: Ref, w: Ref :: { exists_path(EG, u_1, w),exists_path(EG, w, v_1) } exists_path_(EG, u_1, w) && exists_path_(EG, w, v_1) ==> exists_path_(EG, u_1, v_1))
  }
  
  axiom ax_AcyclicGraph {
    (forall EG: Set[Edge] :: { acyclic_graph(EG) } acyclic_graph(EG) == (forall v1_0: Ref, v2_0: Ref :: { edge(EG, v1_0, v2_0) } { exists_path(EG, v2_0, v1_0) } !edge(EG, v1_0, v2_0) || !exists_path(EG, v2_0, v1_0)))
  }
  
  axiom ax_UnsharedGraph {
    (forall EG: Set[Edge] :: { unshared_graph(EG) } unshared_graph(EG) == (forall v1_0: Ref, v2_0: Ref, v_1: Ref :: { edge(EG, v1_0, v_1),edge(EG, v2_0, v_1) } edge(EG, v1_0, v_1) && edge(EG, v2_0, v_1) ==> v1_0 == v2_0))
  }
  
  axiom ax_FuncGraph {
    (forall EG: Set[Edge] :: { func_graph(EG) } func_graph(EG) == (forall v1_0: Ref, v2_0: Ref, v_1: Ref :: { edge(EG, v_1, v1_0),edge(EG, v_1, v2_0) } edge(EG, v_1, v1_0) && edge(EG, v_1, v2_0) ==> v1_0 == v2_0))
  }
  
  axiom ax_ExistsSetPath {
    (forall EG: Set[Edge], from: Set[Ref], to: Ref :: { exists_spath(EG, from, to) } exists_spath(EG, from, to) == !(forall f: Ref :: { (f in from) } { exists_path(EG, f, to) } !((f in from) && exists_path(EG, f, to))))
  }
}

domain Node {
  
  
}

domain Graph {
  
  
}

domain List {
  
  
}

domain Assume {
  
  
}

field next: Ref

function $$(nodes: Set[Ref]): Set[Edge]
  requires (forall n_1: Ref :: { n_1.next } (n_1 in nodes) ==> acc(n_1.next, 1 / 2))
  ensures (forall p: Ref, s: Ref :: { create_edge(p, s) } ((p in nodes) && (s in nodes) && p.next == s) == (create_edge(p, s) in result))
  ensures (forall p: Ref, s: Ref :: { (p in nodes),(s in nodes),exists_path(result, p, s) } (p in nodes) && exists_path(result, p, s) ==> (s in nodes))
  ensures (forall p: Ref, s: Ref :: { (p in nodes),(s in nodes),exists_path(result, p, s) } (s in nodes) && exists_path(result, p, s) ==> (p in nodes)) 


function DISJOINT(g1_1: Set[Ref], g2: Set[Ref]): Bool 
{
  (forall n_1: Ref :: { (n_1 in g1_1) } { (n_1 in g2) } (n_1 in g1_1) ==> !((n_1 in g2)))
}

function NoNullInGraph(g0_1: Set[Ref]): Bool 
{
  !((null in g0_1))
}

function CLOSED(g_0: Set[Ref]): Bool
  requires (forall n_1: Ref :: { n_1.next } (n_1 in g_0) ==> acc(n_1.next, 1 / 2)) 
{
  (forall n_1: Ref :: { (n_1.next in g_0) } { (n_1 in g_0),n_1.next } (n_1 in g_0) && n_1.next != null ==> (n_1.next in g_0))
}

function apply_TCFraming(g0_1: Set[Ref], g1_1: Set[Ref]): Bool
  requires (forall n_1: Ref :: { n_1.next } (n_1 in g0_1) ==> acc(n_1.next, 1 / 2))
  requires (forall n_1: Ref :: { n_1.next } (n_1 in g1_1) ==> acc(n_1.next, 1 / 2))
  ensures (g0_1 union g1_1) == (g1_1 union g0_1)
  ensures (forall u_1: Ref, v_1: Ref :: { exists_path($$(g0_1), u_1, v_1) } { exists_path($$((g0_1 union g1_1)), u_1, v_1) } (u_1 in g0_1) && ((v_1 in g0_1) && exists_path($$(g0_1), u_1, v_1)) ==> exists_path($$((g0_1 union g1_1)), u_1, v_1))
  ensures (forall u_1: Ref, v_1: Ref :: { exists_path($$(g1_1), u_1, v_1) } { exists_path($$((g1_1 union g0_1)), u_1, v_1) } (u_1 in g1_1) && ((v_1 in g1_1) && exists_path($$(g1_1), u_1, v_1)) ==> exists_path($$((g1_1 union g0_1)), u_1, v_1))
  ensures (forall u_1: Ref, v_1: Ref :: { exists_path($$(g0_1), u_1, v_1) } { exists_path($$((g0_1 union g1_1)), u_1, v_1) } (u_1 in g0_1) && ((v_1 in g0_1) && !exists_path($$((g0_1 union g1_1)), u_1, v_1)) ==> !exists_path($$(g0_1), u_1, v_1))
  ensures (forall u_1: Ref, v_1: Ref :: { exists_path($$(g1_1), u_1, v_1) } { exists_path($$((g1_1 union g0_1)), u_1, v_1) } (u_1 in g1_1) && ((v_1 in g1_1) && !exists_path($$((g1_1 union g0_1)), u_1, v_1)) ==> !exists_path($$(g1_1), u_1, v_1))
  ensures (forall u_1: Ref, v_1: Ref :: { exists_path($$(g0_1), u_1, v_1) } { exists_path($$((g0_1 union g1_1)), u_1, v_1) } (u_1 in g0_1) && ((v_1 in g0_1) && (!exists_path($$(g0_1), u_1, v_1) && ((CLOSED(g0_1) || CLOSED(g1_1)) && DISJOINT(g0_1, g1_1)))) ==> !exists_path($$((g0_1 union g1_1)), u_1, v_1))
  ensures (forall u_1: Ref, v_1: Ref :: { exists_path($$(g1_1), u_1, v_1) } { exists_path($$((g0_1 union g1_1)), u_1, v_1) } (u_1 in g1_1) && ((v_1 in g1_1) && (!exists_path($$(g1_1), u_1, v_1) && ((CLOSED(g0_1) || CLOSED(g1_1)) && DISJOINT(g0_1, g1_1)))) ==> !exists_path($$((g1_1 union g0_1)), u_1, v_1))
  ensures CLOSED(g0_1) && DISJOINT(g0_1, g1_1) ==> (forall u_1: Ref, v_1: Ref :: { exists_path($$((g0_1 union g1_1)), u_1, v_1) } (u_1 in g0_1) && (v_1 in g1_1) ==> !exists_path($$((g0_1 union g1_1)), u_1, v_1))
  ensures CLOSED(g1_1) && DISJOINT(g0_1, g1_1) ==> (forall u_1: Ref, v_1: Ref :: { exists_path($$((g0_1 union g1_1)), v_1, u_1) } (u_1 in g0_1) && (v_1 in g1_1) ==> !exists_path($$((g0_1 union g1_1)), v_1, u_1))
  ensures IS_ZOPG((g0_1 union g1_1)) ==> IS_ZOPG(g0_1) 


function IS_ZOPG(g_0: Set[Ref]): Bool 


function apply_TCFraming2(g0: Set[Ref], g1: Set[Ref]): Bool
  requires (forall n: Ref :: { n.next } (n in g0) ==> acc(n.next, write))
  requires (forall n: Ref :: { n.next } (n in g1) ==> acc(n.next, write))
  requires (g1 intersection g0) == Set[Ref]()
  ensures (g0 union g1) == (g1 union g0)
  ensures (forall u: Ref, v: Ref :: { exists_path($$(g0), u, v) } { exists_path($$((g0 union g1)), u, v) } (u in g0) && ((v in g0) && exists_path($$(g0), u, v)) ==> exists_path($$((g0 union g1)), u, v))
  ensures (forall u: Ref, v: Ref :: { exists_path($$(g1), u, v) } { exists_path($$((g1 union g0)), u, v) } (u in g1) && ((v in g1) && exists_path($$(g1), u, v)) ==> exists_path($$((g1 union g0)), u, v))
  ensures (forall u: Ref, v: Ref :: { exists_path($$(g0), u, v) } { exists_path($$((g0 union g1)), u, v) } (u in g0) && ((v in g0) && !exists_path($$(g0), u, v)) ==> !exists_path($$((g0 union g1)), u, v))
  ensures (forall u: Ref, v: Ref :: { exists_path($$(g1), u, v) } { exists_path($$((g0 union g1)), u, v) } (u in g1) && ((v in g1) && !exists_path($$(g1), u, v)) ==> !exists_path($$((g1 union g0)), u, v)) 


function apply_TCFraming3(g0_0: Set[Ref], g1_0: Set[Ref]): Bool
  requires (forall n_0: Ref :: { n_0.next } (n_0 in g0_0) ==> acc(n_0.next, 1 / 2))
  requires (forall n_0: Ref :: { n_0.next } (n_0 in g1_0) ==> acc(n_0.next, 1 / 2))
  ensures (g0_0 union g1_0) == (g1_0 union g0_0)
  ensures (forall u_0: Ref, v_0: Ref :: { exists_path($$(g0_0), u_0, v_0) } { exists_path($$((g0_0 union g1_0)), u_0, v_0) } (u_0 in g0_0) && ((v_0 in g0_0) && exists_path($$(g0_0), u_0, v_0)) ==> exists_path($$((g0_0 union g1_0)), u_0, v_0))
  ensures (forall u_0: Ref, v_0: Ref :: { exists_path($$(g1_0), u_0, v_0) } { exists_path($$((g1_0 union g0_0)), u_0, v_0) } (u_0 in g1_0) && ((v_0 in g1_0) && exists_path($$(g1_0), u_0, v_0)) ==> exists_path($$((g1_0 union g0_0)), u_0, v_0))
  ensures (forall u_0: Ref, v_0: Ref :: { exists_path($$(g0_0), u_0, v_0) } { exists_path($$((g0_0 union g1_0)), u_0, v_0) } (u_0 in g0_0) && ((v_0 in g0_0) && !exists_path($$((g0_0 union g1_0)), u_0, v_0)) ==> !exists_path($$(g0_0), u_0, v_0))
  ensures (forall u_0: Ref, v_0: Ref :: { exists_path($$(g1_0), u_0, v_0) } { exists_path($$((g1_0 union g0_0)), u_0, v_0) } (u_0 in g1_0) && ((v_0 in g1_0) && !exists_path($$((g1_0 union g0_0)), u_0, v_0)) ==> !exists_path($$(g1_0), u_0, v_0))
  ensures (forall u_0: Ref, v_0: Ref :: { exists_path($$(g0_0), u_0, v_0) } { exists_path($$((g0_0 union g1_0)), u_0, v_0) } (u_0 in g0_0) && ((v_0 in g0_0) && (!exists_path($$(g0_0), u_0, v_0) && ((CLOSED(g0_0) || CLOSED(g1_0)) && DISJOINT(g0_0, g1_0)))) ==> !exists_path($$((g0_0 union g1_0)), u_0, v_0))
  ensures (forall u_0: Ref, v_0: Ref :: { exists_path($$(g1_0), u_0, v_0) } { exists_path($$((g0_0 union g1_0)), u_0, v_0) } (u_0 in g1_0) && ((v_0 in g1_0) && (!exists_path($$(g1_0), u_0, v_0) && ((CLOSED(g0_0) || CLOSED(g1_0)) && DISJOINT(g0_0, g1_0)))) ==> !exists_path($$((g1_0 union g0_0)), u_0, v_0))
  ensures CLOSED(g0_0) && DISJOINT(g0_0, g1_0) ==> (forall u_0: Ref, v_0: Ref :: { exists_path($$((g0_0 union g1_0)), u_0, v_0) } (u_0 in g0_0) && (v_0 in g1_0) ==> !exists_path($$((g0_0 union g1_0)), u_0, v_0))
  ensures CLOSED(g1_0) && DISJOINT(g0_0, g1_0) ==> (forall u_0: Ref, v_0: Ref :: { exists_path($$((g0_0 union g1_0)), v_0, u_0) } (u_0 in g0_0) && (v_0 in g1_0) ==> !exists_path($$((g0_0 union g1_0)), v_0, u_0)) 


method unlink_DAG_next(g_0: Set[Ref], x_0: Ref)
  requires (x_0 in g_0)
  requires !((null in g_0)) && ((x_0 in g_0) && (acc(x_0.next, write) && (forall n_1: Ref :: { n_1.next } (n_1 in g_0) && n_1 != x_0 ==> acc(n_1.next, 1 / 2))))
  ensures !((null in g_0)) && ((x_0 in g_0) && (acc(x_0.next, write) && (forall n_1: Ref :: { n_1.next } (n_1 in g_0) && n_1 != x_0 ==> acc(n_1.next, 1 / 2))))
  ensures x_0.next == null
  ensures old(x_0.next) == null ==> $$(g_0) == old($$(g_0))
  ensures old(x_0.next) != null ==> (forall v1_0: Ref, v2_0: Ref :: { edge($$(g_0), v1_0, v2_0) } edge($$(g_0), v1_0, v2_0) == (edge(old($$(g_0)), v1_0, v2_0) && !(v1_0 == x_0 && v2_0 == old(x_0.next))))
  ensures old(x_0.next) != null ==> (forall v1_0: Ref, v2_0: Ref :: { exists_path($$(g_0), v1_0, v2_0) } !(exists_path(old($$(g_0)), v1_0, x_0) && exists_path(old($$(g_0)), old(x_0.next), v2_0)) ==> exists_path(old($$(g_0)), v1_0, v2_0) == exists_path($$(g_0), v1_0, v2_0))
  ensures old(x_0.next) != null ==> (forall v1_0: Ref, v2_0: Ref :: { exists_path($$(g_0), v1_0, v2_0) } (exists_path(old($$(g_0)), v1_0, x_0) && exists_path(old($$(g_0)), old(x_0.next), v2_0) ==> exists_path($$(g_0), v1_0, v2_0)) == (v1_0 == v2_0 || ((exists n_1: Ref :: exists_path(old($$(g_0)), v1_0, n_1) && (exists_path(old($$(g_0)), n_1, v2_0) && (!exists_path(old($$(g_0)), n_1, x_0) && !exists_path(old($$(g_0)), x_0, n_1) || !exists_path(old($$(g_0)), n_1, old(x_0.next)) && !exists_path(old($$(g_0)), old(x_0.next), n_1)))) || ((exists n_1: Ref :: n_1 != x_0 && (n_1 != old(x_0.next) && (exists_path(old($$(g_0)), x_0, n_1) && exists_path(old($$(g_0)), n_1, old(x_0.next))))) || (exists u_1: Ref, v_1: Ref :: (u_1 != x_0 || v_1 != old(x_0.next)) && (edge(old($$(g_0)), u_1, v_1) && (exists_path(old($$(g_0)), v1_0, u_1) && (exists_path(old($$(g_0)), u_1, x_0) && (exists_path(old($$(g_0)), old(x_0.next), v_1) && exists_path(old($$(g_0)), v_1, v2_0))))))))))


method unjoin(g0: Set[Ref], g1: Set[Ref], x0: Ref, x1: Ref)
  requires (forall n_1: Ref :: { n_1.next } (n_1 in (g0 union g1)) ==> acc(n_1.next, write))
  requires NoNullInGraph(g0) && acyclic_graph($$(g0))
  requires NoNullInGraph(g1) && acyclic_graph($$(g1))
  requires x0 != null ==> (x0 in (g0 union g1))
  requires x1 != null ==> (x1 in (g0 union g1))
  requires DISJOINT(g0, g1)
  requires CLOSED((g0 union g1))
  requires (x0 in g0) && (x1 in g1)
  requires (forall n: Ref :: { exists_path($$(g0), n, x0) } (n in g0) ==> exists_path($$(g0), n, x0))
  requires (forall n: Ref :: { exists_path($$(g1), x1, n),(n in g1) } (n in g1) ==> exists_path($$(g1), x1, n))
  requires (forall n: Ref, m: Ref :: { (n in g0),(m in g1) } (n in g0) && (m in g1) ==> edge($$((g0 union g1)), n, m) == (n == x0 && m == x1))
  requires (forall n: Ref, m: Ref :: { (n in g1),(m in g0) } (n in g1) && (m in g0) ==> !edge($$((g0 union g1)), n, m))
  requires acyclic_graph($$((g0 union g1))) && (func_graph($$((g0 union g1))) && unshared_graph($$((g0 union g1))))
  requires x0.next == x1
  ensures (forall n_1: Ref :: { n_1.next } (n_1 in (g0 union g1)) ==> acc(n_1.next, write))
  ensures NoNullInGraph(g0)
  ensures acyclic_graph($$(g0))
  ensures NoNullInGraph(g1)
  ensures acyclic_graph($$(g1))
  ensures CLOSED(g0)
  ensures CLOSED(g1)
  ensures (forall n: Ref :: { exists_path($$(g1), x1, n),(n in g1) } (n in g1) ==> exists_path($$(g1), x1, n))
  ensures (forall n: Ref :: { exists_path($$(g0), n, x0) } (n in g0) ==> exists_path($$(g0), n, x0))
{
  var UNIVERSE: Set[Ref]
  var unionGraph: Set[Ref]
  var unionGraph_init: Int
  UNIVERSE := (g0 union g1)
  unionGraph_init := 0
  
  // Apply TC Framing for input graphs g0 and g1 
  inhale apply_TCFraming(g0, g1)
  
  // Initialize the unique variable of unionGraph.
  unionGraph_init := 0
  
  // assign unique value 1 to the assignment of unionGraph.
  unionGraph_init := 1
  unionGraph := (g0 union g1)
  
  // added assertion for typechecking.
  assert CLOSED(g0) && IS_ZOPG(g0) && (CLOSED(g1) && IS_ZOPG(g1)) || (CLOSED(g0) && CLOSED(g1) || (CLOSED(g0) && (CLOSED(g1) && IS_ZOPG(g1)) || (CLOSED(g0) && IS_ZOPG(g0) && CLOSED(g1) || (CLOSED(g0) && (CLOSED((g0 union g1)) && acyclic_graph($$((g0 union g1)))) || (IS_ZOPG(g1) && (CLOSED((g0 union g1)) && acyclic_graph($$((g0 union g1)))) || (CLOSED(g0) && (IS_ZOPG(g1) && (CLOSED((g0 union g1)) && acyclic_graph($$((g0 union g1))))) || (IS_ZOPG(g0) && (CLOSED(g1) && IS_ZOPG(g1) && (CLOSED((g0 union g1)) && acyclic_graph($$((g0 union g1))))) || (IS_ZOPG(g1) && (CLOSED((g0 union g1)) && acyclic_graph($$((g0 union g1)))) || (IS_ZOPG(g0) && (IS_ZOPG(g1) && (CLOSED((g0 union g1)) && acyclic_graph($$((g0 union g1))))) || (IS_ZOPG(g0) && (IS_ZOPG(g1) && (CLOSED((g0 union g1)) && acyclic_graph($$((g0 union g1))))) || (CLOSED(g0) && (CLOSED((g0 union g1)) && acyclic_graph($$((g0 union g1)))) || (IS_ZOPG(g0) && (CLOSED((g0 union g1)) && acyclic_graph($$((g0 union g1)))) || (IS_ZOPG(g1) && (CLOSED((g0 union g1)) && acyclic_graph($$((g0 union g1)))) || (IS_ZOPG(g0) && (CLOSED(g1) && (CLOSED((g0 union g1)) && acyclic_graph($$((g0 union g1))))) || (IS_ZOPG(g0) && (CLOSED((g0 union g1)) && acyclic_graph($$((g0 union g1)))) || (CLOSED(g0) && (IS_ZOPG(g1) && (CLOSED((g0 union g1)) && acyclic_graph($$((g0 union g1))))) || (CLOSED(g1) && IS_ZOPG(g1) && (CLOSED((g0 union g1)) && acyclic_graph($$((g0 union g1)))) || (CLOSED(g1) && (CLOSED((g0 union g1)) && acyclic_graph($$((g0 union g1)))) || (CLOSED(g1) && (CLOSED((g0 union g1)) && acyclic_graph($$((g0 union g1)))) || (CLOSED(g0) && (IS_ZOPG(g1) && (CLOSED((g0 union g1)) && acyclic_graph($$((g0 union g1))))) || (IS_ZOPG(g0) && (CLOSED(g1) && IS_ZOPG(g1) && (CLOSED((g0 union g1)) && acyclic_graph($$((g0 union g1))))) || (IS_ZOPG(g1) && (CLOSED((g0 union g1)) && acyclic_graph($$((g0 union g1)))) || (CLOSED(g0) && (CLOSED((g0 union g1)) && acyclic_graph($$((g0 union g1)))) || (IS_ZOPG(g0) && (CLOSED((g0 union g1)) && acyclic_graph($$((g0 union g1)))) || (CLOSED(g0) && IS_ZOPG(g0) && (CLOSED((g0 union g1)) && acyclic_graph($$((g0 union g1)))) || (CLOSED(g0) && IS_ZOPG(g0) && (IS_ZOPG(g1) && (CLOSED((g0 union g1)) && acyclic_graph($$((g0 union g1))))) || (IS_ZOPG(g0) && (IS_ZOPG(g1) && (CLOSED((g0 union g1)) && acyclic_graph($$((g0 union g1))))) || (IS_ZOPG(g0) && (CLOSED(g1) && IS_ZOPG(g1) && (CLOSED((g0 union g1)) && acyclic_graph($$((g0 union g1))))) || (CLOSED(g1) && IS_ZOPG(g1) && (CLOSED((g0 union g1)) && acyclic_graph($$((g0 union g1)))) || (CLOSED(g0) && IS_ZOPG(g0) && (IS_ZOPG(g1) && (CLOSED((g0 union g1)) && acyclic_graph($$((g0 union g1))))) || (IS_ZOPG(g0) && (IS_ZOPG(g1) && (CLOSED((g0 union g1)) && acyclic_graph($$((g0 union g1))))) || (IS_ZOPG(g0) && (CLOSED((g0 union g1)) && acyclic_graph($$((g0 union g1)))) || (CLOSED(g0) && IS_ZOPG(g0) && (IS_ZOPG(g1) && (CLOSED((g0 union g1)) && acyclic_graph($$((g0 union g1))))) || (CLOSED(g0) && IS_ZOPG(g0) && (CLOSED((g0 union g1)) && acyclic_graph($$((g0 union g1)))) || (CLOSED(g1) && IS_ZOPG(g1) && (CLOSED((g0 union g1)) && acyclic_graph($$((g0 union g1)))) || (IS_ZOPG(g0) && (CLOSED(g1) && (CLOSED((g0 union g1)) && acyclic_graph($$((g0 union g1))))) || (CLOSED(g1) && (CLOSED((g0 union g1)) && acyclic_graph($$((g0 union g1)))) || (CLOSED(g0) && IS_ZOPG(g0) && (CLOSED((g0 union g1)) && acyclic_graph($$((g0 union g1)))) || (IS_ZOPG(g0) && (CLOSED(g1) && (CLOSED((g0 union g1)) && acyclic_graph($$((g0 union g1))))) || (CLOSED(g0) && (IS_ZOPG(g1) && CLOSED((g0 union g1))) || (CLOSED(g0) && CLOSED((g0 union g1)) || (CLOSED(g1) && IS_ZOPG(g1) && CLOSED((g0 union g1)) || (CLOSED(g0) && IS_ZOPG(g0) && CLOSED((g0 union g1)) || (IS_ZOPG(g0) && (CLOSED(g1) && IS_ZOPG(g1) && CLOSED((g0 union g1))) || (CLOSED(g0) && IS_ZOPG(g0) && (IS_ZOPG(g1) && CLOSED((g0 union g1))) || (CLOSED(g1) && CLOSED((g0 union g1)) || (IS_ZOPG(g0) && (CLOSED(g1) && CLOSED((g0 union g1))) || (CLOSED(g0) && (CLOSED(g1) && acyclic_graph($$((g0 union g1)))) || (CLOSED(g0) && IS_ZOPG(g0) && (CLOSED(g1) && IS_ZOPG(g1) && acyclic_graph($$((g0 union g1)))) || (CLOSED(g0) && (CLOSED(g1) && IS_ZOPG(g1) && acyclic_graph($$((g0 union g1)))) || (CLOSED(g0) && IS_ZOPG(g0) && (CLOSED(g1) && acyclic_graph($$((g0 union g1)))) || (CLOSED(g0) && IS_ZOPG(g0) && (CLOSED(g1) && acyclic_graph($$((g0 union g1)))) || (CLOSED(g0) && IS_ZOPG(g0) && (CLOSED(g1) && IS_ZOPG(g1) && acyclic_graph($$((g0 union g1)))) || (CLOSED(g0) && (CLOSED(g1) && acyclic_graph($$((g0 union g1)))) || (CLOSED(g0) && (CLOSED(g1) && IS_ZOPG(g1) && acyclic_graph($$((g0 union g1)))) || (CLOSED(g0) && (CLOSED(g1) && acyclic_graph($$((g0 union g1)))) || (CLOSED(g0) && (CLOSED(g1) && IS_ZOPG(g1) && acyclic_graph($$((g0 union g1)))) || (CLOSED(g0) && IS_ZOPG(g0) && (CLOSED(g1) && IS_ZOPG(g1) && acyclic_graph($$((g0 union g1)))) || CLOSED(g0) && IS_ZOPG(g0) && (CLOSED(g1) && acyclic_graph($$((g0 union g1))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
  UNIVERSE := (UNIVERSE union unionGraph)
  
  // Changed from generic update to DAG Update.
  unlink_DAG_next(unionGraph, x0)
  inhale apply_TCFraming(g0, g1)
}

method unlink(g: Set[Ref], x: Ref)
  requires (x in g)
  requires !((null in g)) && ((x in g) && (acc(x.next, write) && (forall n_1: Ref :: { n_1.next } (n_1 in g) && n_1 != x ==> acc(n_1.next, 1 / 2))))
  ensures !((null in g)) && ((x in g) && (acc(x.next, write) && (forall n_1: Ref :: { n_1.next } (n_1 in g) && n_1 != x ==> acc(n_1.next, 1 / 2))))
  ensures x.next == null
  ensures old(x.next) == null ==> $$(g) == old($$(g))
  ensures old(x.next) != null ==> (forall v1: Ref, v2: Ref :: { edge($$(g), v1, v2) } edge($$(g), v1, v2) == (edge(old($$(g)), v1, v2) && !(v1 == x && v2 == old(x.next))))
  ensures old(x.next) != null ==> (forall v1: Ref, v2: Ref :: { exists_path($$(g), v1, v2) } v1 != v2 ==> exists_path($$(g), v1, v2) == (exists_path(old($$(g)), v1, v2) && !(exists_path(old($$(g)), v1, x) && exists_path(old($$(g)), old(x.next), v2))))
