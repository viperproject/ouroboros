field n1:Node
method test2(g0: Graph, g1: Graph, x: Node, y: Node) returns (g: Graph)
requires x in g0 && y in g1
 
// -- doesn't work with type Node in the quantifier
//requires forall n:Node, m:Node :: n in g0 && m in g0 ==> EXISTS_PATH(g0,n,m)
 
requires forall n:Ref, m:Ref :: n in g0 && m in g0 ==> EXISTS_PATH(g0,n,m)
requires forall n:Ref, m:Ref :: n in g1 && m in g1 ==> EXISTS_PATH(g1,n,m)
 //:: ExpectedOutput(postcondition.violated)
ensures forall n:Ref, m:Ref :: n in g0 && m in g1 ==> EXISTS_PATH(g,n,m) // Why does this verify? 
{
g := g0 union g1 
}