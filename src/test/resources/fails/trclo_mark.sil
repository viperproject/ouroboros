//Duplicatie Identifiers
/**

    Transitive Closure Example #3: the mark method of mark-and-sweep JC.

    Based on SIMULATING REACHABILITY USING FIRST-ORDER LOGIC

    https://arxiv.org/pdf/0904.4902.pdf

    Oct 21, 2017

    Works fine in Carbon. Still couldn't make it work in Silicon. Seems to be a matching loop issue.

 */

// Just an ADT
domain Edge {
    function edge_pred(e:Edge): Ref
    function edge_succ(e:Edge): Ref
    function create_edge(p:Ref, s:Ref): Edge

    axiom edge_injectivity {
        forall p:Ref, s:Ref ::
            { create_edge(p,s) }
                edge_pred( create_edge(p,s) ) == p &&
                edge_succ( create_edge(p,s) ) == s
    }
}

/** Establishing the edge relation. */
define edge(EG,p,s) ( create_edge(p,s) in EG )

domain TrClo {

    function exists_path(EG:Set[Edge], start:Ref, end:Ref): Bool
    function exists_path_(EG:Set[Edge], start:Ref, end:Ref): Bool
    function exists_spath(EG:Set[Edge], from:Set[Ref], to:Ref): Bool

    function is_on_path(EG:Set[Edge], start:Ref, w:Ref, end:Ref): Bool


    /// U is the universe;
    /// EG is the edge graph (specifies the edge relation)
    /// A is the color predicate
    /// M is the marker
    function apply_IND(EG:Set[Edge], Z:Set[Ref], P:Set[Ref]): Bool
    function apply_noExit(EG:Set[Edge], U:Set[Ref], M:Set[Ref]): Bool
    function apply_goOut(EG:Set[Edge], U:Set[Ref], A:Set[Ref], B:Set[Ref]): Bool
    function apply_newStart(U:Set[Ref], A:Set[Ref], EG1:Set[Edge], EG2:Set[Edge]): Bool

    /** axiomatization of the set for instantiating color axioms with unary reachability */
    function inst_uReach(EG:Set[Edge], x:Ref): Set[Ref]

    /** The properties of the edge relation. */
    function acyclic_graph(EG:Set[Edge]): Bool
    function unshared_graph(EG:Set[Edge]): Bool
    function func_graph(EG:Set[Edge]): Bool

    // The first color axiom from the paper. (Via Refs)

    axiom ax_NoExit {
        forall EG:Set[Edge], U:Set[Ref], M:Set[Ref] :: { apply_noExit(EG,U,M) }
        // apply_noExit(EG,U,M) &&
        ( apply_noExit(EG,U,M) ==> (

            ( forall u:Ref, v:Ref :: { edge(EG,u,v) }       { u in M, v in M } (u in M) && (v in U) && !(v in M) ==> !edge(EG,u,v) ) ==>
            ( forall u:Ref, v:Ref :: { exists_path(EG,u,v) }{ u in M, v in M } (u in M) && (v in U) && !(v in M) ==> !exists_path(EG,u,v) )
        ) )
    }

    /*
    // TODO: revise the triggers!
    axiom ax_GoOut {
        forall EG:Set[Edge], U:Set[Ref], A:Set[Ref], B:Set[Ref] :: { apply_goOut(EG,U,A,B) }
        // apply_goOut(EG,U,A,B) &&
        ( apply_goOut(EG,U,A,B) ==> (

            ( forall u:Ref, v:Ref :: { edge(EG,u,v) }{ u in A, v in A }{ u in A, v in B } (u in A) && (v in U) && !(v in A) && edge(EG,u,v) ==> v in B ) ==>
            ( forall u:Ref, v:Ref :: { exists_path(EG,u,v) }{ u in A, v in A }            (u in A) && (v in U) && !(v in A) && exists_path(EG,u,v) ==> exists w:Ref :: w in B && exists_path(EG,u,w) && exists_path(EG,w,v) )
        ) )
    }

    axiom ax_NewStart {
        forall U:Set[Ref], A:Set[Ref], EG1:Set[Edge], EG2:Set[Edge] :: { apply_newStart(U,A,EG1,EG2) }
        // apply_newStart(U,A,EG1,EG2) &&
        ( apply_newStart(U,A,EG1,EG2) ==> (

            ( forall u:Ref, v:Ref :: { edge(EG1,u,v) }{ u in A, v in A } (u in A) && (v in A) && edge(EG2,u,v) ==> edge(EG1,u,v) )  ==>
            ( forall u:Ref, v:Ref :: { exists_path(EG1,u,v) }{ exists_path(EG2,u,v) } exists_path(EG2,u,v) && !exists_path(EG1,u,v) ==> exists w:Ref :: (w in U) && !(w in A) && exists_path(EG2,u,w) && exists_path(EG2,w,v) )
        ) )

    }

    // IND -- Ref-oriented encoding
    axiom ax_InductionPrinciple {
        forall EG:Set[Edge], Z:Set[Ref], P:Set[Ref] :: { apply_IND(EG,Z,P) }
        // apply_IND(EG,Z,P) &&
        ( apply_IND(EG,Z,P) ==> (

                ( ( forall z:Ref:: { z in Z }{ z in P } (z in Z) ==> (z in P) ) && ( forall u:Ref, v:Ref :: { edge(EG,u,v) }{ u in P, v in P } (u in P) && edge(EG,u,v) ==> (v in P) ) ) ==>
                ( forall u:Ref,z:Ref :: {exists_path_(EG,z,u)}{z in Z, u in P} (z in Z) && exists_path(EG,z,u) ==> (u in P) )
        ) )
    }*/

    axiom ax_instantiation_uReach {
        forall EG:Set[Edge], x:Ref, v: Ref ::
            { v in inst_uReach(EG,x) }
            { exists_path(EG,x,v) }
                v in inst_uReach(EG,x) <==> exists_path(EG,x,v)
    }

    axiom ax_Alias {
        forall EG:Set[Edge], start:Ref, end:Ref ::
            { exists_path(EG,start,end) }
                exists_path(EG,start,end) <==> exists_path_(EG,start,end)
    }

    axiom ax_IsOnPath {
        forall EG:Set[Edge], start:Ref, mid:Ref, end:Ref ::
            { is_on_path(EG,start,mid,end) }
            { edge(EG,start,mid), exists_path_(EG,mid,end) }
                is_on_path(EG,start,mid,end) <==> edge(EG,start,mid) && exists_path_(EG,mid,end)
    }

    /** T1 -- Ref-oriented encoding */
    axiom ax_ExistsPath {
        forall EG:Set[Edge], start:Ref, end:Ref ::
            { exists_path(EG,start,end) }
            { edge(EG,start,end) }
                exists_path_(EG,start,end) <==>
                    start == end
                    || exists w:Ref :: edge(EG,start,w) && exists_path_(EG,w,end)
                    //|| exists w:Ref :: is_on_path(EG,start,w,end)
    }

    /** Follows from T1 && IND */
    axiom ax_ExistsPathTrans {
        forall EG:Set[Edge], u:Ref, v:Ref, w:Ref ::
            { exists_path(EG,u,w), exists_path(EG,w,v) }
                exists_path_(EG,u,w) && exists_path_(EG,w,v) ==> exists_path_(EG,u,v)
    }


    axiom ax_ExistsSetPath {
        forall EG:Set[Edge], from:Set[Ref], to:Ref ::
            { exists_spath(EG,from,to) }
                exists_spath(EG,from,to) <==>
                    exists f:Ref :: f in from && exists_path(EG,f,to)
    }
}

field car:Ref
field cdr:Ref

function $$(refs:Set[Ref]): Set[Edge] //There is an edge between all connected Refs in refs
    requires NODES(refs)
    ensures forall p:Ref, s:Ref ::
        { edge(result,p,s) }
        //{ edge(result,p,s) }
            p in refs && s in refs && (p.car == s || p.cdr == s)
            <==> edge(result,p,s)

define NODES(nodes) //access to all fields of the Refs in nodes
    true
    && (forall n:Ref :: {n.car} n in nodes ==> acc(n.car))
	&& (forall n:Ref :: {n.cdr} n in nodes ==> acc(n.cdr))

define GRAPH(nodes) //access to all fields of the Refs in nodes and all nodes have nonnull fields, and they are in nodes, too.
	!(null in nodes)
	&& NODES(nodes)
	&& ( forall n:Ref ::
        {n.car in nodes}
        {n in nodes, n.car}
		    n in nodes ==> n.car in nodes )
    && ( forall n:Ref ::
        {n.cdr in nodes}
        {n in nodes, n.cdr}
		    n in nodes ==> n.cdr in nodes )

define is_null(n)
    n == vroot

function get(s: Set[Ref]): Ref
    requires |s| > 0
    ensures result in s

method mark(g:Set[Ref], roots:Set[Ref]) returns (marked:Set[Ref])
    requires |roots| > 0
    requires GRAPH(g)
    requires roots subset g
    //ensures roots subset marked
    ensures marked subset g
    ensures GRAPH(g)
    ensures forall v:Ref :: {v in marked}{exists_spath($$(g),roots,v)} v in g ==> ( v in marked ==> exists_spath($$(g),roots,v) )
    ensures forall v:Ref :: {v in marked}{exists_spath($$(g),roots,v)} v in g ==> ( exists_spath($$(g),roots,v) ==> v in marked )
{
    var x:Ref := get(roots)
    var pending:Set[Ref] := roots
    marked := Set()

    while ( |pending| > 0 )
//         // Taking care of permissions.
        invariant GRAPH(g)

//         // Maintaining the graph.
        invariant x in g
        invariant pending subset g
        invariant marked subset g

        invariant exists_spath($$(g),roots,x)
        && ( x.cdr != null ==> edge($$(g),x,x.cdr) && exists_path($$(g),x.cdr,x.cdr) ==> exists_path($$(g),x,x.cdr) )
        && ( x.car != null ==> edge($$(g),x,x.car) && exists_path($$(g),x.car,x.car) ==> exists_path($$(g),x,x.car) )

        invariant
        ( forall n:Ref :: {n in pending}{n in roots} n in roots <==> n in pending ) &&                                                                   /// (5.22)
        ( forall n:Ref :: {n in marked} n in g ==> !(n in marked) )                                                                                      /// (5.23)
         ||
         ( forall n:Ref :: {n in pending}{n in marked} n in roots ==> n in marked || n in pending ) &&                                                    /// (5.24)
         ( forall n:Ref :: {n in pending} n in g ==> !(n in marked && n in pending) ) &&                                                                  /// (5.25)
         ( forall n:Ref :: {exists_spath($$(g),roots,n)} n in pending || n in marked ==> exists_spath($$(g),roots,n) ) &&                                 /// (5.26)
         ( forall n1:Ref, n2:Ref :: {n1 in marked, n2 in marked} n1 in marked && n2 in g && !(n2 in marked) && !(n2 in pending) ==> !edge($$(g),n1,n2) )  /// (5.27)
    {
        // x <- pop(pending)
        x := get(pending)
        pending := pending setminus Set(x)

        // mark x
        marked := marked union Set(x)

        if ( x.car != null && !(x.car in marked) ) {
            pending := pending union Set(x.car)
        }
        if ( x.cdr != null && !(x.cdr in marked) ) {
            pending := pending union Set(x.cdr)
        }

    }

//     // The color axiom. This is one way to dynamically instantiate axioms.
//     // Instantiation: NoExit[marked, f]
//     // Signature: apply_noExit(EG:Set[Edge], U:Set[Ref], M:Set[Ref]): Bool
    assume apply_noExit($$(g), g, marked)

    // assert false
}
