field n1:Node
method test2(g0: Graph[_,_], g1: Graph[_,_], x: Node, y: Node) returns (g: Graph[_,_])
requires x in g0 && y in g1
 
// -- doesn't work with type Node in the quantifier
//requires forall n:Node, m:Node :: n in g0 && m in g0 ==> EXISTS_PATH(g0,n,m)
requires DISJOINT(g0, g1)
 
requires forall n:Ref, m:Ref :: n in g0 && m in g0 ==> EXISTS_PATH(g0,n,m)
requires forall n:Ref, m:Ref :: n in g1 && m in g1 ==> EXISTS_PATH(g1,n,m)
 //:: ExpectedOutput(postcondition.violated:assertion.false)
ensures forall n:Ref, m:Ref :: n in g0 && m in g1 ==> EXISTS_PATH(g,n,m) // Why does this verify?
{
    // var z: Node 
    // //z := new(*)
    // var g2: Graph
    // var g3: ClosedGraph
    //assume z in g2
    assert DISJOINT(g0, g1)
    g := g0 union g1
   // x.n1 := z
}